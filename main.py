from telebot import TeleBot, types
import os

# –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
UPLOAD_FOLDER = "uploads"
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–≥–æ–≤, –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ –±–æ—Ç–∞
SETTINGS_FILE = os.path.join(UPLOAD_FOLDER, "search.txt")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ
upload_data = {}

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
bot = TeleBot('')


# /start
@bot.message_handler(commands=['start'])
def main(message):
    markup = types.InlineKeyboardMarkup()
    # –ü–µ—Ä–≤—ã–π —Ä—è–¥
    btn1 = types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help_btn')
    markup.row(btn1)
    # –í—Ç–æ—Ä–æ–π —Ä—è–¥
    upload_button = types.InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="upload_material")
    btn3 = types.InlineKeyboardButton('–ù–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª', callback_data='search_btn')
    markup.row(upload_button, btn3)
    
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç! {message.from_user.first_name}\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ —É—á–µ–±–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–Ω–∞–Ω–∏—è–º –∏ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏! üìö\n\n"
        "–í–æ—Ç –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "- üîç <b>–ò—Å–∫–∞—Ç—å —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b> –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Ç–µ–≥–∞–º.\n"
        "- üì§ <b>–ó–∞–≥—Ä—É–∂–∞—Ç—å —Å–≤–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b>: –∫–æ–Ω—Å–ø–µ–∫—Ç—ã, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏, –∑–∞–¥–∞—á–∏, —É—á–µ–±–Ω–∏–∫–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n"
        "- üí¨ <b>–û–±—â–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö</b>: –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Å—É–∂–¥–∞–π —Ç–µ–º—ã –∏ –ø–æ–º–æ–≥–∞–π –¥—Ä—É–≥–∏–º.\n"
        "- üìÇ <b>–°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫</b>: —è –æ—Ä–≥–∞–Ω–∏–∑—É—é –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Ç–µ–≥–∞–º, —á—Ç–æ–±—ã –∏—Ö –±—ã–ª–æ –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏.\n\n"
        "–ï—Å–ª–∏ —É –¢–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏ /help, –∏ —è –≤—Å—ë –æ–±—ä—è—Å–Ω—é. üòä\n\n"
    )
    
    bot.send_message(message.chat.id, welcome_text, parse_mode='html', reply_markup=markup)


# /upload_material
@bot.message_handler(commands=['upload_material'])
def start_upload(message):
    initiate_upload(message.chat.id)


# –§—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
def initiate_upload(chat_id):
    bot.send_message(
        chat_id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOCX, PPT, TXT, WORD, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
    )
    upload_data[chat_id] = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"
@bot.callback_query_handler(func=lambda call: call.data == "upload_material")
def handle_upload_button(call):
    initiate_upload(call.message.chat.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
@bot.message_handler(content_types=['document', 'photo'])
def handle_file_upload(message):
    if not message.document and not message.photo:
        bot.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
        return initiate_upload(message.chat.id)  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    if message.document:
        file_info = bot.get_file(message.document.file_id)
        file_extension = os.path.splitext(message.document.file_name)[-1].lower()
    elif message.photo:
        file_info = bot.get_file(message.photo[-1].file_id)
        file_extension = ".jpg"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    allowed_extensions = ['.pdf', '.docx', '.ppt', '.txt', '.jpg', '.png']
    if file_extension not in allowed_extensions:
        bot.send_message(
            message.chat.id, 
            "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return initiate_upload(message.chat.id)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram
    downloaded_file = bot.download_file(file_info.file_path)
    temp_file_path = os.path.join(UPLOAD_FOLDER, f"temp_{message.chat.id}{file_extension}")
    with open(temp_file_path, "wb") as file:
        file.write(downloaded_file)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏ –æ–∂–∏–¥–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    upload_data[message.chat.id] = {"file_path": temp_file_path}
    bot.send_message(message.chat.id, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.")
    ask_for_discipline(message)


# –í—ã–±–æ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
def ask_for_discipline(message):
    markup = types.InlineKeyboardMarkup()
    disciplines = ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è", "–û—Å–Ω. –∞–ª–≥. –∏ –ø—Ä–æ–≥.", "–ú–î–ö 02.02", "–ú–î–ö 05.01", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"]
    for discipline in disciplines:
        markup.add(types.InlineKeyboardButton(text=discipline, callback_data=f"discipline_{discipline}"))
    
    bot.send_message(
        message.chat.id, 
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", 
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("discipline_"))
def save_discipline(call):
    discipline = call.data.split("_")[1]
    upload_data[call.message.chat.id]["discipline"] = discipline
    bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É: {discipline}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
    ask_for_doc_type(call.message)


# –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
def ask_for_doc_type(message):
    markup = types.InlineKeyboardMarkup()
    doc_types = ["–ö–æ–Ω—Å–ø–µ–∫—Ç", "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", "–°–∫–∞–Ω", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"]
    for doc_type in doc_types:
        markup.add(types.InlineKeyboardButton(text=doc_type, callback_data=f"doc_type_{doc_type}"))
    
    bot.send_message(
        message.chat.id, 
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", 
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("doc_type_"))
def save_doc_type(call):
    doc_type = call.data.split("_")[1]
    upload_data[call.message.chat.id]["doc_type"] = doc_type
    bot.send_message(
        call.message.chat.id, 
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞."
    )
    bot.register_next_step_handler(call.message, save_file_with_name)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–º–µ–Ω–µ–º
def save_file_with_name(message):
    user_data = upload_data.get(message.chat.id, {})
    if not user_data:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /upload_material.")
        return

    file_path = user_data.get("file_path")
    discipline = user_data.get("discipline")
    doc_type = user_data.get("doc_type")
    file_extension = os.path.splitext(file_path)[-1]

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    file_name = f"{message.text}{file_extension}"
    final_path = os.path.join(UPLOAD_FOLDER, file_name)

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    os.rename(file_path, final_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ
    with open(SETTINGS_FILE, "a", encoding="utf-8") as f:
        f.write(f"{message.chat.id},{final_path},{discipline},{doc_type}\n")

    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è"
    markup = types.InlineKeyboardMarkup()
    return_to_menu_btn = types.InlineKeyboardButton(
        text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è", callback_data="return_to_menu"
    )
    markup.add(return_to_menu_btn)

    bot.send_message(
        message.chat.id,
        f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {file_name}. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ–≥–æ –ø–æ–∑–∂–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞.",
        reply_markup=markup
    )

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    upload_data.pop(message.chat.id, None)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è"
@bot.callback_query_handler(func=lambda call: call.data == "return_to_menu")
def return_to_menu(call):
    markup = types.InlineKeyboardMarkup()
    upload_button = types.InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload_material")
    search_button = types.InlineKeyboardButton("–ù–∞–π—Ç–∏ —Ñ–∞–π–ª", callback_data="search_btn")
    markup.row(upload_button, search_button)

    bot.send_message(
        call.message.chat.id,
        "–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=markup
    )


# /help
@bot.message_handler(commands=['help'])
def main(message):
    help_text = (
        "üí° <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:</b>\n\n"
        "üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:</b>\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª (PDF, DOCX, PPT –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) –≤ —á–∞—Ç, –∏ –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ç–µ–≥–∏.\n\n"
        "üîç <b>–ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /search, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–ª–∏ —Ç–µ–≥–∞–º.\n"
        "–ü—Ä–∏–º–µ—Ä: `/search –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∞–ª–≥–µ–±—Ä–∞`\n\n"
        "üí¨ <b>–û–±—â–µ–Ω–∏–µ:</b>\n"
        "–î–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∫–∞–Ω–∞–ª—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /join_discussion.\n\n"
    )
    bot.send_message(message.chat.id, help_text, parse_mode='html')


# –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
bot.polling(none_stop=True)
